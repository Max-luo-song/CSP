/*
 *	算法思想：本题也是一道模拟题，创建规则，根据输入给输入。
 *			   本题看上去像是一道图论的题目（图论的方法也确实可以）本题特点有明显的层级性
 *			   并且在计算中也需要这种层级性。本题有两个难点：
 *			   1.利用层级性难点在于整理的过程，也就是构建通路过程。选择的方式是如果是input组成直接等级0
 *			  如果是out的比out的对象高一层。使用while循环直到整个通路的创建。
 *			   2.对于回路的判断。图论中可以通过拓扑排序进行判断回路。本题中认为更新一轮之后，各器件等级没有发生
 *			   改变即为回路（未严格证明，但逆向思考可以解释）	
 *			   另外本题的输入类型比较多，要严格管理，对数据含义进行分类
 *			   建立器件等级并且判断无回路之后，根据等级从小到大进行排序，这样保证计算的过程中上层的输出始终
 *				处于计算好的情况。
 *				总体来说，层级的思路不好想，代码的实现有难度。但题意得理解很直观。以后对于这类明显层级的也要注意区分 
 *			   		 
*/
#include<bits/stdc++.h>
using namespace std;

struct device {
	int id; // 器件编号，从1开始
	int level; // 该器件的层级
	int output; //器件输出
	string type; //器件类型
	bool ct; // 器件是否构造好：输入全部找到并且有效
	vector<int> input; // 器件输入，因为个数不定，所以用vector
	vector<int> id_flag; // 对应每一个器件输入，为0代表输入没结果，为1代表已经存在，可以使用
	vector<string> input_s; // 存储属于该器件的输入字符串 
	device() {
		level = -1;
		ct = false;
	}
	compute() {
		int result = input[0];
		if (type == "NOT") {
			result = !input[0];   
		}
		else if (type == "AND") {
			for (int i=1; i<input.size(); i++) {
				result &= input[i];
			}
		}
		else if (type == "OR") {
			for (int i=1; i<input.size(); i++) {
				result |= input[i];
			}
		}
		else if (type == "XOR") {
			for (int i=1; i<input.size(); i++) {
				result ^= input[i];
			}
		}
		else if (type == "NAND") {
			for (int i=1; i<input.size(); i++) {
				result &= input[i];
			}
			result = !result;
		}
		else {
			for (int i=1; i<input.size(); i++) {
				result |= input[i];
			}
			result = !result;
		}
		output = result;
	}
};

// string to int
int str_to_int(string s) {
	int result;
	string str = s.substr(1); // 去掉第一个，是IO字母
	result = stoi(str);
	return result;
}

bool cmp(device d1, device d2) {
	return d1.level < d2.level;
}

int main(void) {
	int qt_num; // 问题数量
	cin >> qt_num;
	for (int i=0; i<qt_num; i++) {
		//第一部分器件构造——输入
		int in_num,d_num; // 输入数量，器件数量; 
		cin >> in_num >> d_num;
		device dce[d_num];
		for (int j=0; j<d_num; j++) {
			int in_size;
			dce[j].id = j+1; //加一是因为编号从0开始，后面计算要减一
			cin >> dce[j].type >> in_size; // 操作类型，输入数量 
			for (int k=0; k<in_size; k++) {
				string i_o;
				cin >> i_o;
				dce[j].id_flag.push_back(0); // 初始化的时候都无效为0
				dce[j].input_s.push_back(i_o); 
			} 
		}
		// 存储测试器件相关输入
		int test_num;
		cin >> test_num;
		int test_input[test_num][in_num]; // 对于整体来说，输入是固定的
		for (int i=0; i<test_num; i++) {
			for (int j=0; j<in_num; j++) {
				cin >> test_input[i][j];
			}
		}
		// 存储每组测试的指定输出器件编号 
		vector<int> test_output[test_num];
		for (int i=0; i<test_num; i++) {
			int test_output_num;
			cin >> test_output_num;
			for (int j=0; j<test_output_num; j++) {
				int op_num_id;
				cin >> op_num_id;
				test_output[i].push_back(op_num_id);
			}
		}
		
		//开始构建电路
		bool loop = 0; // 标志是否成环，false无环，true有环
		int run_num = 0; // 记录已经搭建好的器件数量
		int pre_level[d_num]; // 判断成环的方式，保留上一层和本层作比较。完全相同，认为有环?
		while (1) {
			run_num = 0; // 每一次都归零，等到最后全部构建完了，按照这个0跳出
			for (int i=0; i<d_num; i++) {
				pre_level[i] = dce[i].level;
			}
			for (int i=0; i<d_num; i++) {
				if (!dce[i].ct) { // 未被构造 
					run_num++;
					for (int j=0; j<dce[i].input_s.size(); j++) { // 根据输入字符串做判断 
						int run_level;
						if (!dce[i].id_flag[j]) { // 没被访问过 
							if (dce[i].input_s[j][0] == 'I') {
								run_level = 0;
								dce[i].id_flag[j] = 1;
							}
							else if (dce[i].input_s[j][0] == 'O') {
								// 只有之前的被访问过此处才能使用，判断一下ct 
								if (dce[str_to_int(dce[i].input_s[j])-1].ct) {
									dce[i].id_flag[j] = 1;
									run_level = dce[str_to_int(dce[i].input_s[j])-1].level + 1; 
								}
							}
							if (run_level > dce[i].level) {
								dce[i].level = run_level;
							}
						}
					}
					// 下面一个for循环判断，是否还有输入没有访问。没有的话更改该设备的ct 
					for (int j=0; j<dce[i].id_flag.size(); j++) {
						if (!dce[i].id_flag[j])
							break;
						if (j == dce[i].id_flag.size()-1)
							dce[i].ct = true;
					}
				}
			}
			// 判断是否成环，方式就是比较两轮的level是否改变
			if (run_num == 0) // 等于0说明已经全部访问过了 
				break; 
			int same_num = 0;
			for (int i=0; i<d_num; i++) {
				if (pre_level[i] == dce[i].level)
					same_num++;
			}
			if (same_num == d_num) {
				loop = true;
				break;
			}
		} // end while
		// 开始测试
		if (loop) {
			cout << "LOOP" << endl;
		} 
		else {
			sort(dce, dce+d_num, cmp); // 排序方式按照层级从小到大排序，这样保证计算某一层时前面的的已经计算好了
			for (int i=0; i<test_num; i++) {
				map<int, int> opt;
				for (int j=0; j<d_num; j++) {
					for (int k=0; k<dce[j].input_s.size(); k++) {
						if (dce[j].input_s[k][0] == 'I')
							dce[j].input.push_back(test_input[i][str_to_int(dce[j].input_s[k])-1]);
						else if (dce[j].input_s[k][0] == 'O')
							dce[j].input.push_back(opt[str_to_int(dce[j].input_s[k])]);
					}
					// 开始计算 
					dce[j].compute();
					opt[dce[j].id] = dce[j].output;
				}
				for (int j=0; j<test_output[i].size(); j++) {
					cout << opt[test_output[i][j]] << " ";
				}
				cout << endl;
				// 以下必须要进行清空，因为每次测试的都要更新一次opt和input 
				opt.clear();
				for (int j=0; j<d_num; j++) {
					dce[j].input.clear();
				}
			} 
		}
	} 
	return 0;
}
// 参考博客：https://blog.csdn.net/qq_44528283/article/details/109501132 
